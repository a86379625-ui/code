from ultralytics import YOLO
import cv2
import time

# Load trained classification model
model = YOLO("runs/classify/train/weights/yolov8n-cls.pt")

# Replace this with your NVR camera RTSP URL
rtsp_url = "rtsp://username:password@192.168.1.100:554/Streaming/Channels/101"

# Open CCTV stream
cap = cv2.VideoCapture(rtsp_url)

# Optional: set resolution (depends on camera stream)
cap.set(3, 1280)
cap.set(4, 720)

prev_time = 0

while True:
    ret, frame = cap.read()
    if not ret:
        print("⚠️ Failed to read from CCTV stream.")
        break

    # Run classification on frame
    results = model.predict(source=frame, imgsz=224, verbose=False)

    # Extract best prediction
    pred_class = int(results[0].probs.top1)
    conf = float(results[0].probs.top1conf)
    label_name = results[0].names[pred_class]

    # --- FPS calculation ---
    curr_time = time.time()
    fps = 1 / (curr_time - prev_time) if prev_time else 0
    prev_time = curr_time

    # --- Dashboard Overlay ---
    overlay = frame.copy()
    cv2.rectangle(overlay, (5, 5), (420, 120), (0, 0, 0), -1)  # black background
    alpha = 0.6
    frame = cv2.addWeighted(overlay, alpha, frame, 1 - alpha, 0)

    # Green if "correct", Red otherwise
    color = (0, 255, 0) if "correct" in label_name.lower() else (0, 0, 255)

    cv2.putText(frame, f"Prediction: {label_name}", (15, 45),
                cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)
    cv2.putText(frame, f"Confidence: {conf:.2f}", (15, 80),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 0), 2)
    cv2.putText(frame, f"FPS: {fps:.1f}", (300, 110),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

    # Show live feed
    cv2.imshow("Box Arrangement Check - CCTV", frame)

    # Exit on 'q' or ESC
    if cv2.waitKey(1) & 0xFF in [ord('q'), 27]:
        break

cap.release()
cv2.destroyAllWindows()
