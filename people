import cv2
import numpy as np

# Load pre-trained model
MODEL_CONFIG = "ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt"
MODEL_WEIGHTS = "frozen_inference_graph.pb"
net = cv2.dnn.readNetFromTensorflow(MODEL_WEIGHTS, MODEL_CONFIG)

# Initialize video capture from NVR
# Replace with your NVR's RTSP URL
NVR_RTSP_URL = "rtsp://username:password@nvr_ip_address:port/stream_path"
cap = cv2.VideoCapture(NVR_RTSP_URL)

# Check if connection is successful
if not cap.isOpened():
    print("Error: Could not connect to NVR")
    exit()

# Set resolution (optional)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

print("Starting people detection... Press 'q' to quit")

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture frame")
        break

    # Prepare input blob
    blob = cv2.dnn.blobFromImage(frame, size=(320, 320), swapRB=True, crop=False)
    
    # Set input and perform inference
    net.setInput(blob)
    detections = net.forward()
    
    # Process detections
    person_count = 0
    rows = frame.shape[0]
    cols = frame.shape[1]
    
    for i in range(detections.shape[2]):
        confidence = detections[0, 0, i, 2]
        
        # Filter out weak detections and only detect people (class ID = 0)
        if confidence > 0.5 and int(detections[0, 0, i, 1]) == 0:
            person_count += 1
            
            # Get bounding box coordinates
            x = int(detections[0, 0, i, 3] * cols)
            y = int(detections[0, 0, i, 4] * rows)
            w = int(detections[0, 0, i, 5] * cols) - x
            h = int(detections[0, 0, i, 6] * rows) - y
            
            # Draw bounding box
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
    
    # Display people count
    cv2.putText(frame, f"People: {person_count}", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    
    # Show the frame
    cv2.imshow('NVR People Detection', frame)
    
    # Exit on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
print("Detection stopped")
