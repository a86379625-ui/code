import cv2

# Define a function to check if boxes are aligned (sorted left to right)
def is_ordered(boxes, tolerance=20):
    centers = [int((x1 + x2) / 2) for (x1, y1, x2, y2) in boxes]
    return all(centers[i] <= centers[i+1] + tolerance for i in range(len(centers) - 1))

# Start webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Preprocessing
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 150)

    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    boxes = []

    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        x, y, w, h = cv2.boundingRect(cnt)

        # Filter for rectangle-shaped and size threshold
        if len(approx) == 4 and w > 50 and h > 50:
            x1, y1, x2, y2 = x, y, x + w, y + h
            boxes.append((x1, y1, x2, y2))
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

    # Check if boxes are in order
    if len(boxes) >= 2:
        boxes.sort(key=lambda b: (b[0] + b[2]) // 2)
        ordered = is_ordered(boxes)
        status = "Ordered" if ordered else "Not Ordered"
        color = (0, 255, 0) if ordered else (0, 0, 255)
    else:
        status = "Waiting for boxes..."
        color = (255, 255, 0)

    cv2.putText(frame, f"Box Order: {status}", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
    cv2.imshow("Box Alignment Checker", frame)

    # Press 'q' to quit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
