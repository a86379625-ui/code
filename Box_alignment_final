import cv2
import numpy as np

def check_box_arrangement_live(camera_index=0):
    cap = cv2.VideoCapture(camera_index)

    if not cap.isOpened():
        print("Error: Could not open camera")
        return
    
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Failed to grab frame")
            break

        image = frame.copy()
        result_image = image.copy()

        # Convert to grayscale
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(gray, (5, 5), 0)

        # Edge detection
        edges = cv2.Canny(blurred, 50, 150)

        # Find contours
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        boxes = []
        misaligned_ids = set()
        tilted_ids = set()
        overhanging_ids = set()

        for cnt in contours:
            peri = cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
            
            if len(approx) == 4:
                x, y, w, h = cv2.boundingRect(cnt)
                area = w * h
                if area < 1000:  # skip small contours
                    continue
                
                rect = cv2.minAreaRect(cnt)
                (cx, cy), (w_rect, h_rect), angle = rect
                if angle < -45:
                    angle = 90 + angle

                box_info = {
                    'contour': cnt,
                    'position': (x, y),
                    'size': (w, h),
                    'center': (cx, cy),
                    'angle': angle,
                    'width': w_rect,
                    'height': h_rect
                }
                boxes.append(box_info)

        # Sort boxes by position
        boxes_sorted = sorted(boxes, key=lambda b: (b['center'][1], b['center'][0]))

        for i, box in enumerate(boxes_sorted):
            x, y = box['position']
            w, h = box['size']
            cx, cy = box['center']

            # Tilt check
            if abs(box['angle']) > 7:
                tilted_ids.add(id(box))
                cv2.drawContours(result_image, [box['contour']], -1, (0, 0, 255), 2)
                cv2.putText(result_image, "Tilt", (x, y-10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,255), 2)

            # Row alignment
            same_row_boxes = [b for b in boxes_sorted if abs(b['center'][1] - cy) < 0.2 * h]
            if len(same_row_boxes) > 1:
                avg_y = int(np.mean([b['center'][1] for b in same_row_boxes]))
                if abs(cy - avg_y) > 10:
                    misaligned_ids.add(id(box))
                    cv2.drawContours(result_image, [box['contour']], -1, (0, 165, 255), 2)
                    cv2.putText(result_image, "Misaligned", (x, y-10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,165,255), 2)

            # Overhang check (basic)
            for other_box in boxes_sorted:
                if other_box is box:
                    continue
                ox, oy = other_box['position']
                ow, oh = other_box['size']
                ocx, ocy = other_box['center']
                if abs(cx - ocx) < 30 and abs(cy - ocy) < (h + oh) / 2:
                    if cy < ocy:
                        if cx < ox or cx > ox + ow or cx + w > ox + ow:
                            overhanging_ids.add(id(box))
                            cv2.drawContours(result_image, [box['contour']], -1, (255, 0, 255), 2)
                            cv2.putText(result_image, "Overhang", (x, y-10),
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,0,255), 2)

        # --- Report for current frame ---
        total_bad = len(misaligned_ids | tilted_ids | overhanging_ids)
        properly_arranged = len(boxes) - total_bad

        print("\nðŸ“Š Live Box Arrangement Report:")
        print(f"Total boxes detected: {len(boxes)}")
        print(f"Properly arranged: {properly_arranged}")
        print(f"Misaligned: {len(misaligned_ids)}")
        print(f"Tilted: {len(tilted_ids)}")
        print(f"Overhanging: {len(overhanging_ids)}")

        # Show live result
        cv2.imshow("Box Arrangement - Live", result_image)

        # Press 'q' to quit
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# Run live detection
if __name__ == "__main__":
    check_box_arrangement_live(0)  # 0 = default webcam
